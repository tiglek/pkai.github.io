{"version":3,"sources":["webpack:///./src/views/comp-sign-in/comp-sign-in-form.jsx","webpack:///./src/components/SignIn/SignInForm.tsx","webpack:///./src/views/page-auth-signin.jsx","webpack:///./src/pages/auth/signin.jsx","webpack:///./src/constants/providers.ts","webpack:///./src/views/comp-password-recovery/comp-password-recovery-request-form.jsx","webpack:///./src/views/comp-password-recovery/comp-password-recovery-reset-form.jsx","webpack:///./src/components/PasswordRecovery/PasswordRecoveryForm.tsx","webpack:///./src/components/PasswordRecovery/index.ts","webpack:///./src/views/comp-sign-up/comp-sign-up-form.jsx","webpack:///./src/views/comp-sign-up/comp-sign-up-provider-buttons.jsx","webpack:///./src/components/SignUp/SignUpForm.tsx","webpack:///./src/components/SignUp/index.ts"],"names":["CompSignInForm","t","onSubmit","email","onChangeEmail","password","onChangePassword","isSubmitButtonDisabled","errorMessage","name","value","onChange","type","placeholder","autoComplete","disabled","INITIAL_STATE","error","SignInForm","state","event","login","then","res","kind","setState","navigate","ROUTES","catch","message","toString","preventDefault","target","isValidFormData","this","render","props","Component","withTranslation","Layout","SEO","title","SignUp","to","PASSWORD_FORGET","SIGN_UP","providers","id","provider","enabled","getLinkUrl","providerName","API_BASE_URL","CompPasswordRecoveryRequestSent","CompPasswordRecoveryRequestForm","CompPasswordRecoveryResetSent","SIGN_IN","CompPasswordRecoveryResetForm","passwordConfirmation","_log","require","FORGET_PASSWORD_INIT_STATE","sent","ForgetPasswordForm","onUpdateField","e","a","resetPasswordUrl","forgetPassword","_isValidEmail","RESET_PASSWORD_INIT_STATE","ResetPasswordForm","resetPassword","resetPasswordCode","componentDidUpdate","_isValidPassword","form","CompSignUpForm","username","onChangeUsername","onChangePasswordConfirmation","CompSignUpProviderButtons","map","item","key","href","className","social","style","width","SignUpForm","signup","SignUpProviderButtons","filter"],"mappings":"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","file":"component---src-pages-auth-signin-jsx-13d1974073cee3910722.js","sourcesContent":["import React from 'react';\n\nimport './styles.scss';\n\n/**\n * Sign-in form view\n * \n * @param {function} t i18n function\n */\nconst CompSignInForm = ({\n  t,\n  onSubmit,\n  email,\n  onChangeEmail,\n  password,\n  onChangePassword,\n  isSubmitButtonDisabled,\n  errorMessage\n}) => (\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"email\"\n      value={email}\n      onChange={onChangeEmail}\n      type=\"text\"\n      placeholder=\"Email Address\"\n      autoComplete=\"username\"\n    />\n    <input\n      name=\"password\"\n      value={password}\n      onChange={onChangePassword}\n      type=\"password\"\n      placeholder=\"Password\"\n      autoComplete=\"current-password\"\n    />\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-sign-in-button')}\n    </button>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n);\n\nexport default CompSignInForm;\n","import React, { Component } from 'react';\nimport { navigate } from 'gatsby';\n\nimport { login } from '../../services/auth';\nimport * as ROUTES from '../../constants/routes';\n\nimport { ComponentProps } from '../ComponentProps.d';\n\nimport CompSignInFormView from '../../views/comp-sign-in/comp-sign-in-form';\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: '',\n};\n\ninterface SignInFormProps extends ComponentProps {\n}\n\ntype SignInFormStates = typeof INITIAL_STATE;\n\nclass SignInForm extends Component<SignInFormProps, SignInFormStates> {\n\n  state = INITIAL_STATE;\n\n  onSubmit = (event: React.FormEvent): void => {\n    const { email, password } = this.state;\n\n    login({email, password})\n      .then((res) => {\n        if (!res || res.kind !== 'ok') {\n          this.setState({...INITIAL_STATE, error: res ? res.kind : 'unknown-error'});\n        }\n        else {\n          this.setState({ ...INITIAL_STATE });\n          navigate(ROUTES.USER_HOME);\n        }\n      })\n      .catch(error => {\n        this.setState({ error: error.message || error.toString() });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    // !!! The variable, 'name' shold be 'email' or 'password'\n    //@ts-ignore\n    const { name, value } = event.target;\n    //@ts-ignore\n    this.setState({ [name]: value });\n  };\n\n  isValidFormData(): boolean {\n    const { email, password } = this.state;\n    // simple check\n    return !!(password && email)\n  }\n\n  render(): React.ReactElement {\n    const isSubmitButtonDisabled = !this.isValidFormData();\n    const { email, password, error } = this.state;\n\n    // TODO: fix type error\n\n    // @ts-ignore\n    return ( <CompSignInFormView\n      onSubmit={this.onSubmit}\n      email={email}\n      onChangeEmail={this.onChange}\n      password={password}\n      onChangePassword={this.onChange}\n      isSubmitButtonDisabled={isSubmitButtonDisabled}\n      errorMessage={error}\n      {...this.props}\n      />\n    );\n  }\n}\n\nexport { SignInForm };\n","\nimport React from 'react';\nimport { withTranslation } from \"react-i18next\"\nimport { Link } from 'gatsby';\n\nimport { Layout } from \"../components/Layout\";\nimport SEO from \"../components/SEO\";\n\nimport { SignInForm } from '../components/SignIn';\nimport { SignUpProviderButtons } from '../components/SignUp';\nimport { PasswordForgetLink } from '../components/PasswordRecovery';\nimport { SIGN_UP, PASSWORD_FORGET } from '../constants/routes';\n\nconst I18N_ID = 'Others';\n\n/**\n * Sign-in\n * \n * @param {function} t i18n function\n */\nconst PageAuthSignin = ({\n  t\n}) => (\n  <Layout>\n    {/* page title */}\n    <SEO title={t(\"auth.signin\")} />\n\n    <h1>{t(\"auth.signin\")}</h1>\n\n    <SignInForm t={t} />\n    <SignUpProviderButtons />\n    <br/>\n    <p>\n      <Link to={PASSWORD_FORGET}>{t('auth.forget-password')}</Link>\n    </p>\n    <p>\n      <Link to={SIGN_UP}>{t('auth.no-account')}</Link>\n    </p>\n  </Layout>\n);\n\nexport default withTranslation(I18N_ID)(PageAuthSignin);\n","import React from 'react';\n\nimport AuthSigninView from '../../views/page-auth-signin';\n\nexport default () => (\n  <>\n    <AuthSigninView />\n  </>\n);\n","import {API_BASE_URL} from '../config';\n\nconst providers = [\n//  'discord', \n//  'facebook', \n//  'github', \n{id: 'email', provider: 'email', enabled: true},\n{id: 'google.com', provider: 'google', enabled: true}\n//  'microsoft', \n//  'twitch', \n//  'twitter'\n];\n\nexport function getLinkUrl(providerName: string): string {\n  return `${API_BASE_URL}/connect/${providerName}`;\n}\n\nexport function isAvailable(providerId: string): boolean {\n  for (let i = 0; i < providers.length; i ++) {\n    if (providerId === providers[i].id) return providers[i].enabled;\n  }\n  return false;\n}\n\nexport default providers;\n","import React from 'react';\n\n/**\n * ForgetPassword form view\n * \n * @param {TFunction} t i18n function\n * @param {(e: FormEvent<Element>) => Promise<void>} onSubmit\n * @param {string} email\n * @param {(e: ChangeEvent<Element>) => void} onChange\n * @param {boolean} isSubmitButtonDisabled\n * @param {string} errorMessage\n */\nconst CompPasswordRecoveryRequestForm = ({\n  t,\n  onSubmit,\n  email,\n  onChange,\n  isSubmitButtonDisabled,\n  errorMessage,\n}) => (\n  <>\n  <h4>{t(\"auth.pwrecovery-forget\")}</h4>\n\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"email\"\n      value={email}\n      onChange={onChange}\n      type=\"text\"\n      placeholder=\"Email\"\n    /> <br/>\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-forget-password-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n  </>\n);\n\nexport const CompPasswordRecoveryRequestSent = ({\n  t,\n  email,\n}) => (\n  <>\n  <h4>{t('auth.forget-password-form-sent', {email})}</h4>\n  </>\n);\n\nexport default CompPasswordRecoveryRequestForm;\n\n//export { CompPasswordRecoveryRequestSent }\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport { SIGN_IN } from '../../constants/routes';\n\n/**\n * ResetPassword form view\n * \n * @param {TFunction} t i18n function\n * @param {(e: FormEvent<Element>) => Promise<void>} onSubmit\n * @param {string} password\n * @param {string} passwordConfirmation\n * @param {(e: ChangeEvent<Element>) => void} onChange\n * @param {boolean} isSubmitButtonDisabled\n * @param {string} errorMessage\n */\nconst CompPasswordRecoveryResetForm = ({\n  t,\n  onSubmit,\n  password,\n  passwordConfirmation,\n  onChange,\n  isSubmitButtonDisabled,\n  errorMessage\n}) => (\n  <>\n  <h4>{t(\"auth.pwrecovery-reset\")}</h4>\n\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"password\"\n      value={password}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"Password\"\n    /> <br/>\n    <input\n      name=\"passwordConfirmation\"\n      value={passwordConfirmation}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"Password Confirmation\"\n    /> <br/>\n\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-reset-password-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n  </>\n);\n\nexport const CompPasswordRecoveryResetSent = ({\n  t,\n}) => (\n  <>\n    <h4>{t('auth.reset-password-form-sent')}</h4>\n    <Link to={SIGN_IN}>\n      <button>\n        {t('auth.reset-password-form-sent-button')}\n      </button>\n    </Link>\n  </>\n);\n\nexport default CompPasswordRecoveryResetForm\n","//import React, { useState, useEffect } from 'react';\nimport React, { Component, ReactElement } from 'react';\nimport { Link } from 'gatsby';\n\nimport { ComponentProps } from '../ComponentProps.d';\nimport CompPasswordRecoveryRequestForm, { CompPasswordRecoveryRequestSent } \n  from '../../views/comp-password-recovery/comp-password-recovery-request-form';\n\nimport CompPasswordRecoveryResetForm, { CompPasswordRecoveryResetSent }\n  from '../../views/comp-password-recovery/comp-password-recovery-reset-form';\n\nimport { forgetPassword, resetPassword } from '../../services/auth';\n\nimport * as ROUTES from '../../constants/routes';\n\nconst _log = require('debug')('app:comp:PasswordRecovery');\n\n//\n// Forget-Password Form\n//\nconst FORGET_PASSWORD_INIT_STATE = {\n  email: '',\n  error: '',\n  sent: false,\n}\n\ninterface ForgetPasswordFormProps extends ComponentProps {\n  resetPasswordUrl: string;\n}\ntype ForgetPasswordFormStates = typeof FORGET_PASSWORD_INIT_STATE;\n\nexport class ForgetPasswordForm extends Component<ForgetPasswordFormProps, ForgetPasswordFormStates> {\n  state = FORGET_PASSWORD_INIT_STATE;\n\n  onUpdateField = (e: React.ChangeEvent): void => {\n    //@ts-ignore\n    this.setState({[e.target.name]: e.target.value});\n  }\n  \n  onSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n\n    _log(this.state.email, this.props.resetPasswordUrl);\n    const res = await forgetPassword(this.state.email, this.props.resetPasswordUrl)\n    if (res.kind === 'ok') {\n      this.setState({ error: '', sent: true });\n    }\n    else {\n      this.setState({ ...FORGET_PASSWORD_INIT_STATE, error: res.kind });\n    }\n  }\n\n  render(): React.ReactElement {\n    const { email, error } = this.state;\n    const isSubmitButtonDisabled = !_isValidEmail(email);\n\n    if (this.state.sent) {\n      return (\n        <CompPasswordRecoveryRequestSent email={email} {...this.props} />\n      );\n    }\n    else {\n      return (\n        <CompPasswordRecoveryRequestForm \n          t={this.props.t}\n          onSubmit={this.onSubmit}\n          email={email}\n          onChange={this.onUpdateField}\n          isSubmitButtonDisabled={isSubmitButtonDisabled}\n          errorMessage={error}\n        />\n      );\n    }\n  }\n}\n\n//\n// Reset-Password Form\n//\nconst RESET_PASSWORD_INIT_STATE = {\n  password: '',\n  passwordConfirmation: '',\n  error: '',\n  sent: false,\n};\n\ninterface ResetPasswordFormProps extends ComponentProps {\n  resetPasswordCode: string;\n}\ntype ResetPasswordFormStates = typeof RESET_PASSWORD_INIT_STATE;\n\n\nexport class ResetPasswordForm extends Component<ResetPasswordFormProps, ResetPasswordFormStates> {\n  state = RESET_PASSWORD_INIT_STATE;\n\n  onUpdateField = (e: React.ChangeEvent): void => {\n    //@ts-ignore\n    this.setState({[e.target.name]: e.target.value});\n  }\n  \n  onSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n\n    const res = await resetPassword(this.props.resetPasswordCode, this.state.password, this.state.passwordConfirmation)\n    if (res.kind === 'ok') {\n      this.setState({ ...RESET_PASSWORD_INIT_STATE, sent: true });\n    }\n    else {\n      this.setState({ ...RESET_PASSWORD_INIT_STATE, error: res.kind });\n    }\n  }\n\n  componentDidUpdate(): void {\n    // after show reset password result, then go to sign-in page\n    // if (this.state.sent) navigate(ROUTES.SIGN_IN);\n  }\n\n  render(): React.ReactElement {\n    const { password, passwordConfirmation, error } = this.state;\n    const isSubmitButtonDisabled = !_isValidPassword(this.state);\n\n    if (this.state.sent) {\n      return (\n        <CompPasswordRecoveryResetSent {...this.props} />\n      );\n    }\n    else {\n      return (\n        <CompPasswordRecoveryResetForm\n          onSubmit={this.onSubmit}\n          password={password}\n          passwordConfirmation={passwordConfirmation}\n          onChange={this.onUpdateField}\n          isSubmitButtonDisabled={isSubmitButtonDisabled}\n          errorMessage={error}\n          t={this.props.t}\n        />\n      );\n    }\n  }\n}\n\nexport const PasswordForgetLink = (): ReactElement => (\n  <p>\n    <Link to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\n  </p>\n);\n\nconst _isValidEmail = (value: string): boolean => (\n  value !== ''\n);\n\nconst _isValidPassword = (form: any): boolean => (\n  form.password !== '' &&\n  form.passwordConfirmation !== '' &&\n  form.password === form.passwordConfirmation\n);\n","export * from './PasswordRecoveryForm';\n","import React from 'react';\n\nimport './styles.scss';\n\n/**\n * Sign-in form view\n * \n * @param {function} t i18n function\n */\nconst CompSignUpForm = ({\n  t,\n  onSubmit,\n  username,\n  onChangeUsername,\n  email,\n  onChangeEmail,\n  password,\n  onChangePassword,\n  passwordConfirmation,\n  onChangePasswordConfirmation,\n  isSubmitButtonDisabled,\n  errorMessage\n}) => (\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"username\"\n      value={username}\n      onChange={onChangeUsername}\n      type=\"text\"\n      placeholder=\"Full Name\"\n    /> <br/>\n    <input\n      name=\"email\"\n      value={email}\n      onChange={onChangeEmail}\n      type=\"text\"\n      placeholder=\"Email Address\"\n    /> <br/>\n    <input\n      name=\"password\"\n      value={password}\n      onChange={onChangePassword}\n      type=\"password\"\n      placeholder=\"Password\"\n    /> <br/>\n    <input\n      name=\"passwordConfirmation\"\n      value={passwordConfirmation}\n      onChange={onChangePasswordConfirmation}\n      type=\"password\"\n      placeholder=\"Confirm Password\"\n    /> <br/>\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-sign-up-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n);\n\nexport default CompSignUpForm;\n","import React from 'react';\n\nimport './styles.scss';\n\n/**\n * Sign-in provider buttons view\n * \n * @param {object} providers\n * @param {function} getLinkUrl\n */\nconst CompSignUpProviderButtons = ({\n  providers,\n  getLinkUrl,\n}) => (\n  <div>\n    {providers.map((item) => (\n      <div key={item.id}>\n        <a href={getLinkUrl(item.id)} className=\"link\">\n          <button type=\"button\" social={item.provider} style={{ width: '80%' }}>\n            <i className={`fa fa-${item.provider}`} />\n          </button>\n        </a>\n      </div>\n    ))\n    }\n  </div>\n);\n\nexport default CompSignUpProviderButtons;\n","import React, { Component } from 'react';\nimport { navigate } from 'gatsby';\n\nimport { signup } from '../../services/auth';\nimport * as ROUTES from '../../constants/routes';\nimport providers, {getLinkUrl} from '../../constants/providers';\n\nimport { ComponentProps } from '../ComponentProps.d';\n\nimport CompSignUpForm from '../../views/comp-sign-up/comp-sign-up-form';\nimport CompSignUpProviderButtonsView from '../../views/comp-sign-up/comp-sign-up-provider-buttons';\n\nconst INITIAL_STATE = {\n  username: '',\n  email: '',\n  password: '',\n  passwordConfirmation: '',\n  error: '',\n};\n\ninterface SignUpFormProps extends ComponentProps {\n}\n\ntype SignUpFormStates = typeof INITIAL_STATE;\n\nclass SignUpForm extends Component<SignUpFormProps, SignUpFormStates> {\n\n  state = INITIAL_STATE;\n\n  onSubmit = (event: React.FormEvent) => {\n    const { username, email, password } = this.state;\n\n    signup({username, email, password})\n      .then((res) => {\n        if (!res || res.kind !== 'ok') {\n          this.setState({...INITIAL_STATE, error: res ? res.kind : 'unknown-error'});\n        }\n        else {\n          this.setState({ ...INITIAL_STATE });\n          navigate(ROUTES.USER_HOME);\n        }\n      })\n      .catch(error => {\n        this.setState({ error: error.message || error.toString() });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // !!! The variable, 'name' shold be 'username', 'email' or 'password'\n    //@ts-ignore\n    const { name, value } = event.target;\n    //@ts-ignore\n    this.setState({ [name]: value });\n  };\n\n  isValidFormData(): boolean {\n    const { username, email, password, passwordConfirmation } = this.state;\n    // simple check\n    return !!(username && password && email && (password === passwordConfirmation));\n  }\n\n  render() {\n    const isSubmitButtonDisabled = !this.isValidFormData();\n    const { username, email, password, passwordConfirmation, error } = this.state;\n\n    // TODO: fix type error\n    // @ts-ignore\n    return ( <CompSignUpForm\n      onSubmit={this.onSubmit}\n      username={username}\n      onChangeUsername={this.onChange}\n      email={email}\n      onChangeEmail={this.onChange}\n      password={password}\n      onChangePassword={this.onChange}\n      passwordConfirmation={passwordConfirmation}\n      onChangePasswordConfirmation={this.onChange}\n      isSubmitButtonDisabled={isSubmitButtonDisabled}\n      errorMessage={error}\n      {...this.props}\n      />\n    );\n  }\n}\n\nconst SignUpProviderButtons = () => (\n  <CompSignUpProviderButtonsView\n  providers={providers.filter((item) => item.id !== 'email')}\n  getLinkUrl={getLinkUrl}\n  />\n);\n\nexport { SignUpForm, SignUpProviderButtons };\n","export * from './SignUpForm';\n"],"sourceRoot":""}