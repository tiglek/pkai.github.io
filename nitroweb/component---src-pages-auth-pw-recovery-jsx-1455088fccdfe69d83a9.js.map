{"version":3,"sources":["webpack:///./src/components/PasswordRecovery/view-vanilla/request-form.jsx","webpack:///./src/components/PasswordRecovery/view-vanilla/reset-form.jsx","webpack:///./src/components/PasswordRecovery/PasswordRecoveryForm.tsx","webpack:///./src/views/vanilla/page-auth-pw-recovery-reset.jsx","webpack:///./src/views/vanilla/page-auth-pw-recovery-forget.jsx","webpack:///./src/pages/auth/pw-recovery.jsx","webpack:///./src/utils/get-location.ts"],"names":["CompPasswordRecoveryRequestSent","t","email","CompPasswordRecoveryRequestForm","onSubmit","onChange","isSubmitButtonDisabled","errorMessage","name","value","type","placeholder","disabled","CompPasswordRecoveryResetSent","to","PATH_SIGN_IN","CompPasswordRecoveryResetForm","password","passwordConfirmation","_log","require","FORGET_PASSWORD_INIT_STATE","error","sent","ForgetPasswordForm","state","onUpdateField","e","setState","target","a","preventDefault","props","resetPasswordUrl","forgetPassword","res","kind","this","_isValidEmail","Component","RESET_PASSWORD_INIT_STATE","ResetPasswordForm","resetPassword","resetPasswordCode","_isValidPassword","form","withTranslation","PasswordRecoveryPage","location","getLocation","href","code","searchParams","URLSearchParams","search","get","keys","_getCodeFromSearchParams","Layout","ctx","request","window","getSearchParam","key","params","substring","split","find","ele"],"mappings":"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","file":"component---src-pages-auth-pw-recovery-jsx-1455088fccdfe69d83a9.js","sourcesContent":["import React from 'react';\n\n/**\n * ForgetPassword form view\n * \n * @param {TFunction} t i18n function\n * @param {(e: FormEvent<Element>) => Promise<void>} onSubmit\n * @param {string} email\n * @param {(e: ChangeEvent<Element>) => void} onChange\n * @param {boolean} isSubmitButtonDisabled\n * @param {string} errorMessage\n */\nconst CompPasswordRecoveryRequestForm = ({\n  t,\n  onSubmit,\n  email,\n  onChange,\n  isSubmitButtonDisabled,\n  errorMessage,\n}) => (\n  <>\n  <h4>{t(\"auth.pwrecovery-forget\")}</h4>\n\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"email\"\n      value={email}\n      onChange={onChange}\n      type=\"text\"\n      placeholder=\"Email\"\n    /> <br/>\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-forget-password-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n  </>\n);\n\nexport const CompPasswordRecoveryRequestSent = ({\n  t,\n  email,\n}) => (\n  <>\n  <h4>{t('auth.forget-password-form-sent', {email})}</h4>\n  </>\n);\n\nexport default CompPasswordRecoveryRequestForm;\n\n//export { CompPasswordRecoveryRequestSent }\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport { PATH_SIGN_IN } from '../../../constants/routes';\n\n/**\n * ResetPassword form view\n * \n * @param {TFunction} t i18n function\n * @param {(e: FormEvent<Element>) => Promise<void>} onSubmit\n * @param {string} password\n * @param {string} passwordConfirmation\n * @param {(e: ChangeEvent<Element>) => void} onChange\n * @param {boolean} isSubmitButtonDisabled\n * @param {string} errorMessage\n */\nconst CompPasswordRecoveryResetForm = ({\n  t,\n  onSubmit,\n  password,\n  passwordConfirmation,\n  onChange,\n  isSubmitButtonDisabled,\n  errorMessage\n}) => (\n  <>\n  <h4>{t(\"auth.pwrecovery-reset\")}</h4>\n\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"password\"\n      value={password}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"Password\"\n    /> <br/>\n    <input\n      name=\"passwordConfirmation\"\n      value={passwordConfirmation}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"Password Confirmation\"\n    /> <br/>\n\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-reset-password-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n  </>\n);\n\nexport const CompPasswordRecoveryResetSent = ({\n  t,\n}) => (\n  <>\n    <h4>{t('auth.reset-password-form-sent')}</h4>\n    <Link to={PATH_SIGN_IN}>\n      <button>\n        {t('auth.reset-password-form-sent-button')}\n      </button>\n    </Link>\n  </>\n);\n\nexport default CompPasswordRecoveryResetForm\n","//import React, { useState, useEffect } from 'react';\nimport React, { Component, ReactElement } from 'react';\nimport { Link } from 'gatsby';\n\nimport { ComponentProps } from '../ComponentProps.d';\nimport CompPasswordRecoveryRequestForm, { CompPasswordRecoveryRequestSent } \n  from './view-vanilla/request-form';\n\nimport CompPasswordRecoveryResetForm, { CompPasswordRecoveryResetSent }\n  from './view-vanilla/reset-form';\n\nimport { forgetPassword, resetPassword } from '../../services/auth';\n\nimport { PATH_PASSWORD_FORGET } from '../../constants/routes';\n\nconst _log = require('debug')('app:comp:PasswordRecovery');\n\n//\n// Forget-Password Form\n//\nconst FORGET_PASSWORD_INIT_STATE = {\n  email: '',\n  error: '',\n  sent: false,\n}\n\ninterface ForgetPasswordFormProps extends ComponentProps {\n  resetPasswordUrl: string;\n}\ntype ForgetPasswordFormStates = typeof FORGET_PASSWORD_INIT_STATE;\n\nexport class ForgetPasswordForm extends Component<ForgetPasswordFormProps, ForgetPasswordFormStates> {\n  state = FORGET_PASSWORD_INIT_STATE;\n\n  onUpdateField = (e: React.ChangeEvent): void => {\n    //@ts-ignore\n    this.setState({[e.target.name]: e.target.value});\n  }\n  \n  onSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n\n    _log(this.state.email, this.props.resetPasswordUrl);\n    const res = await forgetPassword(this.state.email, this.props.resetPasswordUrl)\n    if (res.kind === 'ok') {\n      this.setState({ error: '', sent: true });\n    }\n    else {\n      this.setState({ ...FORGET_PASSWORD_INIT_STATE, error: res.kind });\n    }\n  }\n\n  render(): React.ReactElement {\n    const { email, error } = this.state;\n    const isSubmitButtonDisabled = !_isValidEmail(email);\n\n    if (this.state.sent) {\n      return (\n        <CompPasswordRecoveryRequestSent email={email} {...this.props} />\n      );\n    }\n    else {\n      return (\n        <CompPasswordRecoveryRequestForm \n          t={this.props.t}\n          onSubmit={this.onSubmit}\n          email={email}\n          onChange={this.onUpdateField}\n          isSubmitButtonDisabled={isSubmitButtonDisabled}\n          errorMessage={error}\n        />\n      );\n    }\n  }\n}\n\n//\n// Reset-Password Form\n//\nconst RESET_PASSWORD_INIT_STATE = {\n  password: '',\n  passwordConfirmation: '',\n  error: '',\n  sent: false,\n};\n\ninterface ResetPasswordFormProps extends ComponentProps {\n  resetPasswordCode: string;\n}\ntype ResetPasswordFormStates = typeof RESET_PASSWORD_INIT_STATE;\n\n\nexport class ResetPasswordForm extends Component<ResetPasswordFormProps, ResetPasswordFormStates> {\n  state = RESET_PASSWORD_INIT_STATE;\n\n  onUpdateField = (e: React.ChangeEvent): void => {\n    //@ts-ignore\n    this.setState({[e.target.name]: e.target.value});\n  }\n  \n  onSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n\n    const res = await resetPassword(this.props.resetPasswordCode, this.state.password, this.state.passwordConfirmation)\n    if (res.kind === 'ok') {\n      this.setState({ ...RESET_PASSWORD_INIT_STATE, sent: true });\n    }\n    else {\n      this.setState({ ...RESET_PASSWORD_INIT_STATE, error: res.kind });\n    }\n  }\n\n  componentDidUpdate(): void {\n    // after show reset password result, then go to sign-in page\n    // if (this.state.sent) navigate(ROUTES.SIGN_IN);\n  }\n\n  render(): React.ReactElement {\n    const { password, passwordConfirmation, error } = this.state;\n    const isSubmitButtonDisabled = !_isValidPassword(this.state);\n\n    if (this.state.sent) {\n      return (\n        <CompPasswordRecoveryResetSent {...this.props} />\n      );\n    }\n    else {\n      return (\n        <CompPasswordRecoveryResetForm\n          onSubmit={this.onSubmit}\n          password={password}\n          passwordConfirmation={passwordConfirmation}\n          onChange={this.onUpdateField}\n          isSubmitButtonDisabled={isSubmitButtonDisabled}\n          errorMessage={error}\n          t={this.props.t}\n        />\n      );\n    }\n  }\n}\n\nexport const PasswordForgetLink = (): ReactElement => (\n  <p>\n    <Link to={PATH_PASSWORD_FORGET}>Forgot Password?</Link>\n  </p>\n);\n\nconst _isValidEmail = (value: string): boolean => (\n  value !== ''\n);\n\nconst _isValidPassword = (form: any): boolean => (\n  form.password !== '' &&\n  form.passwordConfirmation !== '' &&\n  form.password === form.passwordConfirmation\n);\n","\nimport React from 'react';\nimport { withTranslation } from \"react-i18next\"\n\nimport { ResetPasswordForm } from '../../components/PasswordRecovery';\n\nconst I18N_ID = 'Others';\n\n/**\n * Password Reset for Password recovery\n * \n * @param {function} t i18n function\n * @param {string} code code value for resetting password\n */\nconst PageAuthPWRecoveryReset = ({\n  t, resetPasswordCode\n}) => (\n  <>\n    <ResetPasswordForm resetPasswordCode={resetPasswordCode} t={t} />\n  </>\n);\n\nexport default withTranslation(I18N_ID)(PageAuthPWRecoveryReset);\n","\nimport React from 'react';\nimport { withTranslation } from \"react-i18next\"\n\nimport { ForgetPasswordForm } from '../../components/PasswordRecovery';\n\nconst I18N_ID = 'Others';\n\n/**\n * Password recovery request form\n * \n * @param {function} t i18n function\n */\nconst PageAuthPWRecoveryForget = ({\n  t,\n  resetPasswordUrl\n}) => (\n  <>\n    <ForgetPasswordForm resetPasswordUrl={resetPasswordUrl} t={t}/>\n  </>\n);\n\nexport default withTranslation(I18N_ID)(PageAuthPWRecoveryForget);\n","import React from 'react';\n\n// components\nimport Layout from \"../../components/Layout\";\n\nimport { getLocation } from '../../utils/get-location';\n\n// view\nimport AuthPWRecoveryResetView from '../../views/vanilla/page-auth-pw-recovery-reset';\nimport AuthPWRecoveryForgetView from '../../views/vanilla/page-auth-pw-recovery-forget';\n\nconst _log = require('debug')('app:page:pw-recovery');\n\n/**\n * Page: password-recovery\n * \n * 이메일을 통해 패스워드 리셋 URL을 전달하고,\n * 리셋 URL로 이동 시 패스워드 리셋 정보를 처리하는 용도로 사용됨\n * \n * URL의 search part에 \n *   - 'code' 값이 존재하면 <ResetPasswordForm> 화면,\n *   - 'code' 값이 존재하지 않으면 <ForgetPasswordForm> 화면이\n * 표시된다.\n */\nconst PasswordRecoveryPage = (props) => {\n  const location = getLocation(props);\n  _log('location.href:', location && location.href);\n  const code = _getCodeFromSearchParams(location);\n  return (\n  <Layout {...props}>\n    {code \n    ? <AuthPWRecoveryResetView resetPasswordCode={code} />\n    : <AuthPWRecoveryForgetView resetPasswordUrl={location ? location.href : ''} />\n    }\n  </Layout>\n  );\n}\n\n/**\n * 아래와 같은 URL의 search part에서 'code' 값을 반환\n * .../auth/pw-recovery?code=<password-reset-code>\n * \n * @param {*} location \n */\nfunction _getCodeFromSearchParams(location) {\n  if (!location) return '';\n  const searchParams = new URLSearchParams(location.search);\n  _log('code: ', searchParams.get('code'), 'keys: ', searchParams.keys());\n  return searchParams.get('code') ? searchParams.get('code') : '';\n}\n\nexport default PasswordRecoveryPage;\n","\n/**\n * 현재 Context의 location object를 반환한다.\n * \n * @param {*} ctx \n */\nexport function getLocation({ ctx, location }: {ctx?: any; location?: any}) {\n  if (location) return location; // \n  // TODO:\n  // SSR env\n  // window.location: https://www.tutorialrepublic.com/javascript-tutorial/javascript-window-location.php\n  // koa request: https://github.com/koajs/koa/blob/master/docs/api/request.md\n  if (ctx && ctx.request) return {\n    'href': ctx.request.href,\n    'search': ctx.request.search,\n    'protocol': '',\n    'host': '',\n    'hostname': '',\n    'port': '',\n    'pathname': '',\n    'hash': ''\n  };\n\n  // browser env\n  if (typeof window !== 'undefined') return window.location;\n\n  return null;\n}\n\nexport function getSearchParam({ search }: {search?: string}, key?: string) {\n  if (!search || search[0] !== '?') return [];\n  const params = search.substring(1).split(\"&\");\n  if (!key) return params;\n  return params.find((ele) => ele === key);\n}\n"],"sourceRoot":""}