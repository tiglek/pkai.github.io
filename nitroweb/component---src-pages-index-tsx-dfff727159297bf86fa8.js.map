{"version":3,"sources":["webpack:///./src/components/Noop/Noop.tsx","webpack:///./src/views/vanilla/page-landing.jsx","webpack:///./src/pages/index.tsx","webpack:///./src/components/SEO.tsx"],"names":["Noop","apiNoop","getApi","useState","noopResponse","setNoopResponse","noopMeResponse","setNoopMeResponse","JSON","stringify","onClick","a","noop","noop_me","withTranslation","t","title","text","withAuthentication","location","site","Layout","SEO","siteMetadata","description","lang","meta","keywords","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join"],"mappings":"2XAMMA,EAA2C,SAAC,GAC5C,WACIC,EAAYC,cAAZD,QADJ,EAGoCE,mBAAS,IAH7C,WAGGC,EAHH,KAGiBC,EAHjB,OAIwCF,mBAAS,IAJjD,WAIGG,EAJH,KAImBC,EAJnB,KAMJ,OACE,oCACE,oCACA,6BAAMC,KAAKC,UAAUL,IACrB,4BAAQM,QAAO,cAAE,sBAAAC,EAAA,kEAAYN,EAAZ,SAAkCJ,EAAQW,OAA1C,wGAAjB,QAGA,6BACA,6BAAMJ,KAAKC,UAAUH,IACrB,4BAAQI,QAAO,cAAE,sBAAAC,EAAA,kEAAYJ,EAAZ,SAAoCN,EAAQY,UAA5C,wGAAjB,gBCASC,cAjBC,UAiBDA,EATK,SAAC,GAAD,IAClBC,EADkB,EAClBA,EAAGC,EADe,EACfA,MADe,OAGlB,oCACE,gCAAMD,EAAE,QAAS,CAACE,KAAMD,IAAxB,KACA,kBAAC,EAAD,UCuBWE,uBAjBG,SAAC,GAES,IAD1BC,EAC0B,EAD1BA,SAEQC,EADkB,OAClBA,KAER,OACE,kBAACC,EAAA,EAAD,CAAQF,SAAUA,GAGhB,kBAACG,EAAA,EAAD,CAAKN,MAAOI,EAAKG,aAAaP,QAE9B,kBAAC,EAAD,CAAiBA,MAAOI,EAAKG,aAAaP,a,gFCwDjCM,IAxE0B,SAAC,GAEpC,QADJE,mBACI,MADQ,GACR,MADYC,YACZ,MADiB,KACjB,MADuBC,YACvB,MAD4B,GAC5B,MADgCC,gBAChC,MADyC,GACzC,EAD6CX,EAC7C,EAD6CA,MAEzCI,EADJ,OACIA,KAaFQ,EAAkBJ,GAAeJ,EAAKG,aAAaC,YAEzD,OACE,kBAAC,IAAD,CACEK,eAAgB,CACdJ,QAEFT,MAAOA,EACPc,cAAa,eAAUV,EAAKG,aAAaP,OACzCU,KAAM,CACJ,CACEK,KAAM,cACNC,QAASJ,GAEX,CACEK,SAAU,WACVD,QAAShB,GAEX,CACEiB,SAAU,iBACVD,QAASJ,GAEX,CACEK,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASZ,EAAKG,aAAaW,QAE7B,CACEH,KAAM,gBACNC,QAAShB,GAEX,CACEe,KAAM,sBACNC,QAASJ,IAGVO,OACCR,EAASS,OAAS,EACd,CACEL,KAAM,WACNC,QAASL,EAASU,KAAT,OAEX,IAELF,OAAOT,O","file":"component---src-pages-index-tsx-dfff727159297bf86fa8.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { getApi } from \"../../services/api\";\r\n\r\ninterface NoopProps {\r\n}\r\n\r\nconst Noop: React.FunctionComponent<NoopProps> = ({\r\n}) => {\r\n  const { apiNoop } = getApi();\r\n\r\n  const [noopResponse, setNoopResponse] = useState({});\r\n  const [noopMeResponse, setNoopMeResponse] = useState({});\r\n\r\n  return (\r\n    <>\r\n      <h5>NOOP</h5>\r\n      <div>{JSON.stringify(noopResponse)}</div>\r\n      <button onClick={async () => setNoopResponse(await apiNoop.noop())}>\r\n        NOOP\r\n      </button>\r\n      <br/>\r\n      <div>{JSON.stringify(noopMeResponse)}</div>\r\n      <button onClick={async () => setNoopMeResponse(await apiNoop.noop_me())}>\r\n        NOOP -- me\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport { Noop };\r\n","import React from 'react';\nimport { withTranslation } from \"react-i18next\"\n\nimport { Noop } from \"../../components/Noop\";\n\nconst I18N_ID = 'Landing';\n\n/**\n * Landing Page\n * \n * @param {TFunction} t i18n function\n * @param {string} title page title\n */\nconst PageLanding = ({\n  t, title,\n}) => (\n  <>\n    <h1> {t('hello', {text: title})} </h1>\n    <Noop />\n  </>\n);\n\nexport default withTranslation(I18N_ID)(PageLanding);\n","import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\n// components\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/SEO\";\nimport { withAuthentication } from \"../components/Session\";\n\n// page view\nimport LandingPageView from '../views/vanilla/page-landing';\n\n// query\nconst query = graphql`\nquery {\n  site {\n    siteMetadata {\n      title,\n      languages {\n        defaultLangKey,\n      }\n    }\n  }\n}`;\n\nconst IndexPage = ({\n  location\n}: {location: Location}) => {\n  const { site } = useStaticQuery(query);\n\n  return (\n    <Layout location={location}>\n\n      {/* page title */}\n      <SEO title={site.siteMetadata.title} />\n\n      <LandingPageView title={site.siteMetadata.title}/>\n\n    </Layout>\n  );\n}\n\nexport default withAuthentication(IndexPage);\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, {FunctionComponent} from \"react\";\nimport Helmet from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\ninterface SEOProps {\n  description?: string;\n  lang?: string;\n  meta?: any;\n  keywords?: string[];\n  title: string;\n}\n\nconst SEO: FunctionComponent<SEOProps> = ({\n  description='', lang='en', meta=[], keywords=[], title\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nexport default SEO;\n"],"sourceRoot":""}