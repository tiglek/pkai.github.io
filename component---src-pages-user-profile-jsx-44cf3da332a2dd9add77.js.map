{"version":3,"sources":["webpack:///./src/components/PasswordChange/view/password-change-form.jsx","webpack:///./src/components/PasswordChange/PasswordChangeForm.tsx","webpack:///./src/components/LoginManagement/strapi.jsx","webpack:///./src/views/vanilla/page-user-profile.jsx","webpack:///./src/pages/user/profile.jsx","webpack:///./src/constants/providers.ts"],"names":["PasswordChangeForm","t","onSubmit","oldPassword","newPassword","newPasswordConfirmation","onChange","isSubmitButtonDisabled","errorMessage","name","value","type","placeholder","disabled","INITIAL_STATE","error","state","onUpdateField","e","setState","target","event","a","preventDefault","changePassword","res","kind","this","_isValidPassword","props","Component","form","LoginManagement","_initFirebase","onSocialLoginLink","provider","onDefaultLoginLink","password","onUnlink","providerId","activeSignInMethods","SIGN_IN_METHODS","map","signInMethod","onlyOneLeft","length","isEnabled","includes","id","key","onLink","message","SocialLoginToggle","onClick","DefaultLoginToggle","passwordOne","passwordTwo","isInvalid","withTranslation","withAuthentication","Layout","providers","enabled","getLinkUrl","providerName","API_BASE_URL"],"mappings":"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","file":"component---src-pages-user-profile-jsx-44cf3da332a2dd9add77.js","sourcesContent":["import React from 'react';\n\n/**\n * Password change form view\n * \n * @param {TFunction} t i18n function\n * @param {(e: FormEvent<Element>) => Promise<void>} onSubmit\n * @param {string} oldPassword\n * @param {string} newPassword\n * @param {string} newPasswordConfirmation\n * @param {(e: ChangeEvent<Element>) => void} onChange\n * @param {boolean} isSubmitButtonDisabled\n * @param {string} errorMessage\n */\nconst PasswordChangeForm = ({\n  t,\n  onSubmit,\n  oldPassword,\n  newPassword,\n  newPasswordConfirmation,\n  onChange,\n  isSubmitButtonDisabled,\n  errorMessage\n}) => (\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"oldPassword\"\n      value={oldPassword}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"Current Password\"\n    /> <br/>\n    <input\n      name=\"newPassword\"\n      value={newPassword}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"New Password\"\n    /> <br/>\n    <input\n      name=\"newPasswordConfirmation\"\n      value={newPasswordConfirmation}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"New Password Confirmation\"\n    /> <br/>\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-change-password-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n);\n\nexport default PasswordChangeForm;\n","import React, { Component } from 'react';\n\nimport { changePassword } from '../../services/auth';\nimport { ComponentProps } from '../ComponentProps.d';\n\nimport PasswordChangeFormView from './view/password-change-form';\n\nconst INITIAL_STATE = {\n  oldPassword: '',\n  newPassword: '',\n  newPasswordConfirmation: '',\n  error: '',\n};\n\ninterface PasswordChangeFormProps extends ComponentProps {}\ntype PasswordChangeStates = typeof INITIAL_STATE;\n\nclass PasswordChangeForm extends Component<PasswordChangeFormProps, PasswordChangeStates> {\n  state = INITIAL_STATE;\n\n  onUpdateField = (e: React.ChangeEvent): void => {\n    //@ts-ignore\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  onSubmit = async (event: React.FormEvent): Promise<void> => {\n    event.preventDefault();\n\n    const res = await changePassword(this.state.oldPassword, this.state.newPassword, this.state.newPasswordConfirmation);\n    if (res.kind === 'ok') {\n      this.setState({...INITIAL_STATE, error: 'success'});\n    }\n    else {\n      this.setState({ error: res.kind });\n    }\n  };\n\n  render(): React.ReactElement {\n    const { oldPassword, newPassword, newPasswordConfirmation, error } = this.state;\n    const isSubmitButtonDisabled = !_isValidPassword(this.state);\n\n    return (\n      <PasswordChangeFormView\n        onSubmit={this.onSubmit}\n        oldPassword={oldPassword}\n        newPassword={newPassword}\n        newPasswordConfirmation={newPasswordConfirmation}\n        onChange={this.onUpdateField}\n        isSubmitButtonDisabled={isSubmitButtonDisabled}\n        errorMessage={error}\n        {...this.props}\n      />\n    );\n  }\n}\n\nexport {\n  PasswordChangeForm\n}\n\nconst _isValidPassword = (form: any): boolean => (\n  form.oldPassword !== '' &&\n  form.newPassword !== '' &&\n  form.newPasswordConfirmation !== '' &&            // not empty value\n  form.oldPassword !== form.newPassword &&          // diff with old one\n  form.newPassword === form.newPasswordConfirmation // same with confirmation one\n);\n","import React, { Component } from 'react';\n\nimport SIGN_IN_METHODS from '../../constants/providers';\n\nclass LoginManagement extends Component {\n  _initFirebase = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeSignInMethods: [],\n      error: null,\n    };\n  }\n\n  componentDidMount() {\n  }\n\n  componentDidUpdate() {\n  }\n\n  onSocialLoginLink = provider => {\n  };\n\n  onDefaultLoginLink = password => {\n  };\n\n  onUnlink = providerId => {\n  };\n\n  render() {\n    const { activeSignInMethods, error } = this.state;\n\n    return (\n      <div>\n        <ul>\n          {SIGN_IN_METHODS.map(signInMethod => {\n            const onlyOneLeft = activeSignInMethods.length === 1;\n            const isEnabled = activeSignInMethods.includes(\n              signInMethod.id,\n            );\n\n            return (\n              <li key={signInMethod.id}>\n                {signInMethod.id === 'password' ? (\n                  <DefaultLoginToggle\n                    onlyOneLeft={onlyOneLeft}\n                    isEnabled={isEnabled}\n                    signInMethod={signInMethod}\n                    onLink={this.onDefaultLoginLink}\n                    onUnlink={this.onUnlink}\n                  />\n                ) : (\n                  <SocialLoginToggle\n                    onlyOneLeft={onlyOneLeft}\n                    isEnabled={isEnabled}\n                    signInMethod={signInMethod}\n                    onLink={this.onSocialLoginLink}\n                    onUnlink={this.onUnlink}\n                  />\n                )}\n              </li>\n            );\n          })}\n        </ul>\n        {error && error.message}\n      </div>\n    );\n  }\n}\n\nconst SocialLoginToggle = ({\n  onlyOneLeft,\n  isEnabled,\n  signInMethod,\n  onLink,\n  onUnlink,\n}) =>\n  isEnabled ? (\n    <button\n      type=\"button\"\n      onClick={() => onUnlink(signInMethod.id)}\n      disabled={onlyOneLeft}\n    >\n      Deactivate {signInMethod.id}\n    </button>\n  ) : (\n    <button\n      type=\"button\"\n      onClick={() => onLink(signInMethod.provider)}\n    >\n      Link {signInMethod.id}\n    </button>\n  );\n\nclass DefaultLoginToggle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { passwordOne: '', passwordTwo: '' };\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n\n    this.props.onLink(this.state.passwordOne);\n    this.setState({ passwordOne: '', passwordTwo: '' });\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const {\n      onlyOneLeft,\n      isEnabled,\n      signInMethod,\n      onUnlink,\n    } = this.props;\n\n    const { passwordOne, passwordTwo } = this.state;\n\n    const isInvalid =\n      passwordOne !== passwordTwo || passwordOne === '';\n\n    return isEnabled ? (\n      <button\n        type=\"button\"\n        onClick={() => onUnlink(signInMethod.id)}\n        disabled={onlyOneLeft}\n      >\n        Deactivate {signInMethod.id}\n      </button>\n    ) : (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"New Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm New Password\"\n        />\n\n        <button disabled={isInvalid} type=\"submit\">\n          Link {signInMethod.id}\n        </button>\n      </form>\n    );\n  }\n}\n\nexport {\n  LoginManagement\n}\n","\nimport React from 'react';\nimport { withTranslation } from \"react-i18next\"\n\nimport { PasswordChangeForm } from \"../../components/PasswordChange\";\nimport { LoginManagement } from \"../../components/LoginManagement\";\n\nconst I18N_ID = 'Others';\n\n/**\n * User Profile\n * \n * @param {function} t i18n function\n */\nconst PageUserProfile = ({\n  t\n}) => (\n  <>\n    <br/>\n    <h5>{t(\"user.change-password\")}: </h5>\n    <PasswordChangeForm t={t}/>\n\n    <br/>\n    <h5>{t(\"user.signin-method\")}: </h5>\n    <LoginManagement />\n  </>\n);\n\nexport default withTranslation(I18N_ID)(PageUserProfile);\n","import React from 'react';\n\n// components\nimport Layout from \"../../components/Layout\";\nimport { withAuthentication } from \"../../components/Session\";\n\n// view\nimport UserProfileView from '../../views/vanilla/page-user-profile';\n\nconst UserProfilePage = (props) => (\n  <Layout {...props}>\n\n    <UserProfileView />\n\n  </Layout>\n);\n\nexport default withAuthentication(UserProfilePage);\n","import {API_BASE_URL} from '../config';\n\nconst providers = [\n//  'discord', \n//  'facebook', \n//  'github', \n{id: 'email', provider: 'email', enabled: true},\n{id: 'google.com', provider: 'google', enabled: true}\n//  'microsoft', \n//  'twitch', \n//  'twitter'\n];\n\nexport function getLinkUrl(providerName: string): string {\n  return `${API_BASE_URL}/connect/${providerName}`;\n}\n\nexport function isAvailable(providerId: string): boolean {\n  for (let i = 0; i < providers.length; i ++) {\n    if (providerId === providers[i].id) return providers[i].enabled;\n  }\n  return false;\n}\n\nexport default providers;\n"],"sourceRoot":""}