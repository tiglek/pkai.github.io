{"version":3,"sources":["webpack:///./src/views/page-auth-pw-recovery-reset.jsx","webpack:///./src/views/page-auth-pw-recovery-forget.jsx","webpack:///./src/pages/auth/pw-recovery.jsx","webpack:///./src/utils/get-location.ts","webpack:///./src/views/comp-password-recovery/comp-password-recovery-request-form.jsx","webpack:///./src/views/comp-password-recovery/comp-password-recovery-reset-form.jsx","webpack:///./src/components/PasswordRecovery/PasswordRecoveryForm.tsx","webpack:///./src/components/PasswordRecovery/index.ts"],"names":["withTranslation","t","resetPasswordCode","Layout","SEO","title","resetPasswordUrl","_log","require","PasswordRecoveryPage","props","ctx","location","request","href","search","window","code","searchParams","URLSearchParams","get","keys","_getCodeFromSearchParams","CompPasswordRecoveryRequestSent","email","CompPasswordRecoveryRequestForm","onSubmit","onChange","isSubmitButtonDisabled","errorMessage","name","value","type","placeholder","disabled","CompPasswordRecoveryResetSent","to","SIGN_IN","CompPasswordRecoveryResetForm","password","passwordConfirmation","FORGET_PASSWORD_INIT_STATE","error","sent","ForgetPasswordForm","state","onUpdateField","e","setState","target","a","preventDefault","forgetPassword","res","kind","this","_isValidEmail","Component","RESET_PASSWORD_INIT_STATE","ResetPasswordForm","resetPassword","_isValidPassword","form"],"mappings":"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","file":"component---src-pages-auth-pw-recovery-jsx-d1e7824bb6d949d86c60.js","sourcesContent":["\nimport React from 'react';\nimport { withTranslation } from \"react-i18next\"\n\nimport { Layout } from \"../components/Layout\";\nimport SEO from \"../components/SEO\";\n\nimport { ResetPasswordForm } from '../components/PasswordRecovery';\n\nconst I18N_ID = 'Others';\n\n/**\n * Password Reset for Password recovery\n * \n * @param {function} t i18n function\n * @param {string} code code value for resetting password\n */\nconst PageAuthPWRecoveryReset = ({\n  t, resetPasswordCode\n}) => (\n  <Layout>\n    {/* page title */}\n    <SEO title={t(\"auth.pwrecovery-reset\")} />\n\n    <ResetPasswordForm resetPasswordCode={resetPasswordCode} t={t} />\n\n  </Layout>\n);\n\nexport default withTranslation(I18N_ID)(PageAuthPWRecoveryReset);\n","\nimport React from 'react';\nimport { withTranslation } from \"react-i18next\"\n\nimport { Layout } from \"../components/Layout\";\nimport SEO from \"../components/SEO\";\n\nimport { ForgetPasswordForm } from '../components/PasswordRecovery';\n\nconst I18N_ID = 'Others';\n\n/**\n * Password recovery request form\n * \n * @param {function} t i18n function\n */\nconst PageAuthPWRecoveryForget = ({\n  t,\n  resetPasswordUrl\n}) => (\n  <Layout>\n    {/* page title */}\n    <SEO title={t(\"auth.pwrecovery-forget\")} />\n\n    <ForgetPasswordForm resetPasswordUrl={resetPasswordUrl} t={t}/>\n  \n  </Layout>\n);\n\nexport default withTranslation(I18N_ID)(PageAuthPWRecoveryForget);\n","import React from 'react';\n\nimport getLocation from '../../utils/get-location';\nimport AuthPWRecoveryResetView from '../../views/page-auth-pw-recovery-reset';\nimport AuthPWRecoveryForgetView from '../../views/page-auth-pw-recovery-forget';\n\nconst _log = require('debug')('app:page:pw-recovery');\n\n/**\n * Page: password-recovery\n * \n * 이메일을 통해 패스워드 리셋 URL을 전달하고,\n * 리셋 URL로 이동 시 패스워드 리셋 정보를 처리하는 용도로 사용됨\n * \n * URL의 search part에 \n *   - 'code' 값이 존재하면 <ResetPasswordForm> 화면,\n *   - 'code' 값이 존재하지 않으면 <ForgetPasswordForm> 화면이\n * 표시된다.\n */\nconst PasswordRecoveryPage = (props) => {\n  const location = getLocation(props);\n  _log('location.href:', location && location.href);\n  const code = _getCodeFromSearchParams(location);\n  return (\n  <>\n    {code \n    ? <AuthPWRecoveryResetView resetPasswordCode={code} />\n    : <AuthPWRecoveryForgetView resetPasswordUrl={location ? location.href : ''} />\n    }\n  </>\n  );\n}\n\n/**\n * 아래와 같은 URL의 search part에서 'code' 값을 반환\n * .../auth/pw-recovery?code=<password-reset-code>\n * \n * @param {*} location \n */\nfunction _getCodeFromSearchParams(location) {\n  if (!location) return '';\n  const searchParams = new URLSearchParams(location.search);\n  _log('code: ', searchParams.get('code'), 'keys: ', searchParams.keys());\n  return searchParams.get('code') ? searchParams.get('code') : '';\n}\n\nexport default PasswordRecoveryPage;\n","\n/**\n * 현재 Context의 location object를 반환한다.\n * \n * @param {*} ctx \n */\nexport default function getLocation({ ctx }: {ctx: any}) {\n  // TODO:\n  // SSR env\n  // window.location: https://www.tutorialrepublic.com/javascript-tutorial/javascript-window-location.php\n  // koa request: https://github.com/koajs/koa/blob/master/docs/api/request.md\n  if (ctx && ctx.request) return {\n    'href': ctx.request.href,\n    'search': ctx.request.search,\n    'protocol': '',\n    'host': '',\n    'hostname': '',\n    'port': '',\n    'pathname': '',\n    'hash': ''\n  };\n\n  // browser env\n  if (typeof window !== 'undefined') return window.location;\n\n  return null;\n}\n","import React from 'react';\n\n/**\n * ForgetPassword form view\n * \n * @param {TFunction} t i18n function\n * @param {(e: FormEvent<Element>) => Promise<void>} onSubmit\n * @param {string} email\n * @param {(e: ChangeEvent<Element>) => void} onChange\n * @param {boolean} isSubmitButtonDisabled\n * @param {string} errorMessage\n */\nconst CompPasswordRecoveryRequestForm = ({\n  t,\n  onSubmit,\n  email,\n  onChange,\n  isSubmitButtonDisabled,\n  errorMessage,\n}) => (\n  <>\n  <h4>{t(\"auth.pwrecovery-forget\")}</h4>\n\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"email\"\n      value={email}\n      onChange={onChange}\n      type=\"text\"\n      placeholder=\"Email\"\n    /> <br/>\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-forget-password-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n  </>\n);\n\nexport const CompPasswordRecoveryRequestSent = ({\n  t,\n  email,\n}) => (\n  <>\n  <h4>{t('auth.forget-password-form-sent', {email})}</h4>\n  </>\n);\n\nexport default CompPasswordRecoveryRequestForm;\n\n//export { CompPasswordRecoveryRequestSent }\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nimport { SIGN_IN } from '../../constants/routes';\n\n/**\n * ResetPassword form view\n * \n * @param {TFunction} t i18n function\n * @param {(e: FormEvent<Element>) => Promise<void>} onSubmit\n * @param {string} password\n * @param {string} passwordConfirmation\n * @param {(e: ChangeEvent<Element>) => void} onChange\n * @param {boolean} isSubmitButtonDisabled\n * @param {string} errorMessage\n */\nconst CompPasswordRecoveryResetForm = ({\n  t,\n  onSubmit,\n  password,\n  passwordConfirmation,\n  onChange,\n  isSubmitButtonDisabled,\n  errorMessage\n}) => (\n  <>\n  <h4>{t(\"auth.pwrecovery-reset\")}</h4>\n\n  <form onSubmit={onSubmit}>\n    <input\n      name=\"password\"\n      value={password}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"Password\"\n    /> <br/>\n    <input\n      name=\"passwordConfirmation\"\n      value={passwordConfirmation}\n      onChange={onChange}\n      type=\"password\"\n      placeholder=\"Password Confirmation\"\n    /> <br/>\n\n    <button disabled={isSubmitButtonDisabled} type=\"submit\">\n      {t('auth.form-reset-password-button')}\n    </button> <br/>\n\n    {errorMessage && <p>{errorMessage}</p>}\n  </form>\n  </>\n);\n\nexport const CompPasswordRecoveryResetSent = ({\n  t,\n}) => (\n  <>\n    <h4>{t('auth.reset-password-form-sent')}</h4>\n    <Link to={SIGN_IN}>\n      <button>\n        {t('auth.reset-password-form-sent-button')}\n      </button>\n    </Link>\n  </>\n);\n\nexport default CompPasswordRecoveryResetForm\n","//import React, { useState, useEffect } from 'react';\nimport React, { Component, ReactElement } from 'react';\nimport { Link } from 'gatsby';\n\nimport { ComponentProps } from '../ComponentProps.d';\nimport CompPasswordRecoveryRequestForm, { CompPasswordRecoveryRequestSent } \n  from '../../views/comp-password-recovery/comp-password-recovery-request-form';\n\nimport CompPasswordRecoveryResetForm, { CompPasswordRecoveryResetSent }\n  from '../../views/comp-password-recovery/comp-password-recovery-reset-form';\n\nimport { forgetPassword, resetPassword } from '../../services/auth';\n\nimport * as ROUTES from '../../constants/routes';\n\nconst _log = require('debug')('app:comp:PasswordRecovery');\n\n//\n// Forget-Password Form\n//\nconst FORGET_PASSWORD_INIT_STATE = {\n  email: '',\n  error: '',\n  sent: false,\n}\n\ninterface ForgetPasswordFormProps extends ComponentProps {\n  resetPasswordUrl: string;\n}\ntype ForgetPasswordFormStates = typeof FORGET_PASSWORD_INIT_STATE;\n\nexport class ForgetPasswordForm extends Component<ForgetPasswordFormProps, ForgetPasswordFormStates> {\n  state = FORGET_PASSWORD_INIT_STATE;\n\n  onUpdateField = (e: React.ChangeEvent): void => {\n    //@ts-ignore\n    this.setState({[e.target.name]: e.target.value});\n  }\n  \n  onSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n\n    _log(this.state.email, this.props.resetPasswordUrl);\n    const res = await forgetPassword(this.state.email, this.props.resetPasswordUrl)\n    if (res.kind === 'ok') {\n      this.setState({ error: '', sent: true });\n    }\n    else {\n      this.setState({ ...FORGET_PASSWORD_INIT_STATE, error: res.kind });\n    }\n  }\n\n  render(): React.ReactElement {\n    const { email, error } = this.state;\n    const isSubmitButtonDisabled = !_isValidEmail(email);\n\n    if (this.state.sent) {\n      return (\n        <CompPasswordRecoveryRequestSent email={email} {...this.props} />\n      );\n    }\n    else {\n      return (\n        <CompPasswordRecoveryRequestForm \n          t={this.props.t}\n          onSubmit={this.onSubmit}\n          email={email}\n          onChange={this.onUpdateField}\n          isSubmitButtonDisabled={isSubmitButtonDisabled}\n          errorMessage={error}\n        />\n      );\n    }\n  }\n}\n\n//\n// Reset-Password Form\n//\nconst RESET_PASSWORD_INIT_STATE = {\n  password: '',\n  passwordConfirmation: '',\n  error: '',\n  sent: false,\n};\n\ninterface ResetPasswordFormProps extends ComponentProps {\n  resetPasswordCode: string;\n}\ntype ResetPasswordFormStates = typeof RESET_PASSWORD_INIT_STATE;\n\n\nexport class ResetPasswordForm extends Component<ResetPasswordFormProps, ResetPasswordFormStates> {\n  state = RESET_PASSWORD_INIT_STATE;\n\n  onUpdateField = (e: React.ChangeEvent): void => {\n    //@ts-ignore\n    this.setState({[e.target.name]: e.target.value});\n  }\n  \n  onSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n\n    const res = await resetPassword(this.props.resetPasswordCode, this.state.password, this.state.passwordConfirmation)\n    if (res.kind === 'ok') {\n      this.setState({ ...RESET_PASSWORD_INIT_STATE, sent: true });\n    }\n    else {\n      this.setState({ ...RESET_PASSWORD_INIT_STATE, error: res.kind });\n    }\n  }\n\n  componentDidUpdate(): void {\n    // after show reset password result, then go to sign-in page\n    // if (this.state.sent) navigate(ROUTES.SIGN_IN);\n  }\n\n  render(): React.ReactElement {\n    const { password, passwordConfirmation, error } = this.state;\n    const isSubmitButtonDisabled = !_isValidPassword(this.state);\n\n    if (this.state.sent) {\n      return (\n        <CompPasswordRecoveryResetSent {...this.props} />\n      );\n    }\n    else {\n      return (\n        <CompPasswordRecoveryResetForm\n          onSubmit={this.onSubmit}\n          password={password}\n          passwordConfirmation={passwordConfirmation}\n          onChange={this.onUpdateField}\n          isSubmitButtonDisabled={isSubmitButtonDisabled}\n          errorMessage={error}\n          t={this.props.t}\n        />\n      );\n    }\n  }\n}\n\nexport const PasswordForgetLink = (): ReactElement => (\n  <p>\n    <Link to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\n  </p>\n);\n\nconst _isValidEmail = (value: string): boolean => (\n  value !== ''\n);\n\nconst _isValidPassword = (form: any): boolean => (\n  form.password !== '' &&\n  form.passwordConfirmation !== '' &&\n  form.password === form.passwordConfirmation\n);\n","export * from './PasswordRecoveryForm';\n"],"sourceRoot":""}